package undgen

import (
	"bytes"
	"context"
	"fmt"
	"go/printer"
	"io"
	"log/slog"
	"os"
	"os/exec"
	"path"
	"path/filepath"
	"strings"
)

type Printer struct {
	Log              func(msg string, args ...any)
	Cwd              string
	GeneratorPkgName string
	FileSuffix       string
	FileFactory      func(name string) (io.Writer, error)
}

func (p *Printer) log(msg string, args ...any) {
	if p.Log == nil {
		p.Log = slog.Default().Info
	}
	p.Log(msg, args...)
}

func (p *Printer) cwd() (string, error) {
	if p.Cwd == "" {
		cwd, err := os.Getwd()
		if err != nil {
			return "", err
		}
		p.Cwd = cwd
	}
	return p.Cwd, nil
}

func (p *Printer) suffix() string {
	if p.FileSuffix == "" {
		p.FileSuffix = ".undgen_generated"
	}
	if p.FileSuffix[0] != '.' {
		p.FileSuffix = "." + p.FileSuffix
	}
	return p.FileSuffix
}

// openFile opens a file for a generation original file.
func (p *Printer) openFile(name string) (w io.Writer, filename string, err error) {
	cwd, err := p.cwd()
	if err != nil {
		return nil, "", err
	}

	rel, err := filepath.Rel(cwd, name)
	if err != nil {
		return nil, "", err
	}

	if rel := filepath.ToSlash(rel); strings.HasPrefix(rel, "../") || strings.HasPrefix(rel, "/") {
		return nil, "", fmt.Errorf("generated target file is not under cwd: %s", rel)
	}

	filename = suffixFilename(rel, p.suffix())

	open := p.FileFactory
	if open == nil {
		open = func(file string) (io.Writer, error) { return os.Create(file) }
	}

	w, err = open(filename)
	return
}

func suffixFilename(f, suffix string) string {
	ext := filepath.Ext(filepath.Base(f))
	f, _ = strings.CutSuffix(f, ext)
	return f + suffix + ext
}

func (p Printer) Print(ctx context.Context, gen GeneratedPlainType) error {
	if err := checkGoimports(); err != nil {
		return fmt.Errorf(
			"goimports does not exist. install it with \"go install golang.org/x/tools/cmd/goimports@latest\": %w",
			err,
		)
	}

	for k, v := range gen.Pkg {
		for _, genTy := range v {
			buf, err := p.generateFile(k, genTy)
			if err != nil {
				return err
			}

			formatted, err := applyGoimports(ctx, bytes.NewReader(buf.Bytes()))
			if err != nil {
				p.log(fmt.Sprintf("\ngoimport failed, buf = %s\n\n", buf.Bytes()))
				return err
			}

			w, filename, err := p.openFile(genTy.FileName)
			if err != nil {
				return err
			}

			err = func() error {
				defer func() {
					if c, ok := w.(io.Closer); ok {
						_ = c.Close()
					}
				}()

				p.log(fmt.Sprintf("writing to %q\n", filename))

				_, err = w.Write(fmt.Appendf(nil, "// Code generated by %s. DO NOT EDIT.\n", p.GeneratorPkgName))
				if err != nil {
					return err
				}

				_, err = w.Write(formatted.Bytes())
				if err != nil {
					return err
				}

				return nil
			}()
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func (p Printer) generateFile(filename string, genTy GeneratedTypeBuf) (*bytes.Buffer, error) {
	pkgName := genTy.PkgName
	if pkgName == "" {
		pkgName = path.Base(filename)
	}
	p.log(fmt.Sprintf("generating for %s", genTy.FileName))

	buf := new(bytes.Buffer)

	fmt.Fprintf(buf, "package %s\n\n", pkgName)

	fmt.Fprintf(buf, "import (\n")
	for k, v := range genTy.Imports {
		fmt.Fprintf(buf, "\t")
		if v != "" && v != path.Base(k) {
			fmt.Fprintf(buf, "%s ", v)
		}
		fmt.Fprintf(buf, "%q\n", k)
	}
	fmt.Fprintf(buf, ")\n")

	for _, ty := range genTy.Generated {
		fmt.Fprintf(buf, "\n")
		fmt.Fprintf(buf, "//"+DirectivePrefix+DirectiveCommentGenerated+"\n")
		printer.Fprint(buf, ty.Fset, ty.Decl)
		fmt.Fprintf(buf, "\n\n")
		err := ty.PrintToPlain(buf)
		if err != nil {
			return buf, err
		}
		fmt.Fprintf(buf, "\n\n")
		err = ty.PrintToRaw(buf)
		if err != nil {
			return buf, err
		}
		fmt.Fprintf(buf, "\n")
	}

	return buf, nil
}

func checkGoimports() error {
	_, err := exec.LookPath("goimports")
	return err
}

func applyGoimports(ctx context.Context, r io.Reader) (*bytes.Buffer, error) {
	cmd := exec.CommandContext(ctx, "goimports")
	cmd.Stdin = r
	formatted := new(bytes.Buffer)
	stderr := new(bytes.Buffer)
	cmd.Stdout = formatted
	cmd.Stderr = stderr
	err := cmd.Run()
	if err != nil {
		return nil, fmt.Errorf("goimports failed: err = %v, msg = %s", err, stderr.Bytes())
	}
	return formatted, nil
}
